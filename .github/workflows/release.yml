name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 v 开头的标签 (如 v1.0.0, v1.2.3)

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_name: dispa-linux-x86_64.tar.gz

          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive_name: dispa-linux-aarch64.tar.gz

          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive_name: dispa-macos-x86_64.tar.gz

          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            archive_name: dispa-macos-aarch64.tar.gz

          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive_name: dispa-windows-x86_64.zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release binary (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build release binary (Other targets)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Extract version from tag
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release directory
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/dispa* release/ || true
          cp README.md release/ || true
          cp USER_MANUAL.md release/ || true
          cp QUICKSTART.md release/ || true
          cp config/config.example.toml release/ || true

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          cd release
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            mv dispa dispa.exe
          fi
          tar -czf ../${{ matrix.archive_name }} *

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd release
          Compress-Archive -Path * -DestinationPath ../${{ matrix.archive_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: ./release-assets/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## Dispa ${{ steps.get_version.outputs.VERSION }}

            高性能流量拦截转发代理服务器新版本发布！

            ### 📦 下载

            | 平台 | 架构 | 下载链接 |
            |------|------|----------|
            | Linux | x86_64 | [dispa-linux-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/dispa-linux-x86_64.tar.gz) |
            | Linux | ARM64 | [dispa-linux-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/dispa-linux-aarch64.tar.gz) |
            | macOS | x86_64 | [dispa-macos-x86_64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/dispa-macos-x86_64.tar.gz) |
            | macOS | ARM64 | [dispa-macos-aarch64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/dispa-macos-aarch64.tar.gz) |
            | Windows | x86_64 | [dispa-windows-x86_64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/dispa-windows-x86_64.zip) |

            ### 🚀 快速开始

            1. **下载对应平台的二进制文件**
            2. **解压到目标目录**
               ```bash
               tar -xzf dispa-linux-x86_64.tar.gz  # Linux/macOS
               # 或
               unzip dispa-windows-x86_64.zip      # Windows
               ```
            3. **创建配置文件**
               ```bash
               cp config.example.toml config.toml
               # 编辑 config.toml 设置你的域名和后端服务器
               ```
            4. **运行服务**
               ```bash
               ./dispa -c config.toml -v
               ```

            ### ✨ 主要特性

            - 🚀 **高性能异步架构** - 基于 Tokio，支持高并发连接
            - 🎯 **智能域名匹配** - 支持精确匹配和通配符 (`*.example.com`)
            - ⚖️ **多种负载均衡** - 轮询、加权、随机、最少连接
            - 🔍 **自动健康检查** - 实时监控后端服务，自动故障转移
            - 📊 **完整流量记录** - 文件和数据库双重存储，支持日志轮转
            - 📈 **Prometheus 监控** - 内置指标导出，Grafana 可视化

            ### 📖 文档

            - **[用户手册](USER_MANUAL.md)** - 详细配置和使用说明
            - **[快速开始](QUICKSTART.md)** - 5分钟上手教程
            - **[开发指南](DEVELOPMENT.md)** - 架构设计和扩展开发

            ### 🔄 更新日志

            查看 [提交历史](https://github.com/${{ github.repository }}/commits/${{ steps.get_version.outputs.VERSION }}) 了解详细更新内容。

            ### 🛠️ 技术支持

            - **GitHub Issues**: [报告问题](https://github.com/${{ github.repository }}/issues)
            - **讨论区**: [功能讨论](https://github.com/${{ github.repository }}/discussions)

            感谢使用 Dispa! 🎉