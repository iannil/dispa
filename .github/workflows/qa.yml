name: Quality Assurance

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quality-checks:
    name: Quality Assurance
    runs-on: ubuntu-latest

    strategy:
      matrix:
        rust:
          - stable
          - beta
        include:
          - rust: stable
            can-fail: false
          - rust: beta
            can-fail: true

    continue-on-error: ${{ matrix.can-fail }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check compilation
      run: cargo check --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run documentation tests
      run: cargo test --doc

    - name: Test release build
      run: cargo build --verbose --release

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml
        fail_ci_if_error: false

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install cargo tools
      run: |
        cargo install cargo-outdated
        cargo install cargo-udeps

    - name: Check for outdated dependencies
      run: cargo outdated --exit-code 1
      continue-on-error: true

    - name: Check for unused dependencies
      run: cargo +stable udeps
      continue-on-error: true

  cross-platform:
    name: Cross Platform Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check compilation
      run: cargo check

    - name: Run tests
      run: cargo test

    - name: Build release
      run: cargo build --release

  minimal-versions:
    name: Minimal Versions Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true

    - name: Install cargo-minimal-versions
      run: cargo install cargo-minimal-versions

    - name: Check minimal versions
      run: cargo minimal-versions check
      continue-on-error: true

  linting-extra:
    name: Additional Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for debugging statements
      run: |
        if grep -r "println!\|dbg!\|eprintln!" src/; then
          echo "Found debugging statements in source code"
          exit 1
        fi

    - name: Check for TODO/FIXME
      run: |
        if grep -r "TODO\|FIXME" src/; then
          echo "Found TODO/FIXME comments in source code"
          echo "This is a warning, not an error"
        fi

    - name: Check Cargo.toml format
      run: |
        if ! grep -q "edition.*2021" Cargo.toml; then
          echo "Consider upgrading to Rust 2021 edition"
        fi